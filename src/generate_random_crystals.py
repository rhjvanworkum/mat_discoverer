import random
from pyxtal import pyxtal
from pyxtal.msg import Comp_CompatibilityError
from pymatgen.core import Structure
from typing import List


def generate_random_crystal_structure_from_composition(
    species: List[str],
    num_species: List[int],
) -> Structure:
    """
    Generates a random crystal structure based on a given composition using PyXtal.

    The inputs for the structure generation are:
    1) Space group (randomly sampled)
    2) Composition (based on species and their quantities)
    3) Volume factor (randomly sampled within a range)
    4) Lattice parameters (automatically generated by PyXtal consistent with the space group)

    :param species: List of chemical species in the composition.
    :param num_species: List of the number of atoms for each species.
    :return: A pymatgen Structure object representing the random crystal structure.
    """
    volume_factor = random.uniform(0.9, 1.1)
    composition_frac = 1 / min(num_species)
    composition_multiplicative_factor = random.randint(1, 3)

    while True:
        try:
            return _attempt_crystal_generation(
                species, num_species, composition_frac, composition_multiplicative_factor, volume_factor
            )
        except Comp_CompatibilityError:
            continue


def _attempt_crystal_generation(
    species: List[str],
    num_species: List[int],
    composition_frac: float,
    composition_multiplicative_factor: int,
    volume_factor: float,
) -> Structure:
    """
    Attempts to generate a random crystal structure using PyXtal and returns it as a pymatgen Structure.

    :param species: List of chemical species in the composition.
    :param num_species: List of the number of atoms for each species.
    :param composition_frac: Fractional composition multiplier.
    :param composition_multiplicative_factor: Random multiplicative factor for the composition.
    :param volume_factor: Factor to scale the volume of the generated crystal.
    :return: A pymatgen Structure object.
    """
    my_crystal = pyxtal()
    my_crystal.from_random(
        dim=3,
        group=random.randint(1, 230),
        species=species,
        numIons=[int(num * composition_multiplicative_factor * composition_frac) for num in num_species],
        factor=volume_factor,
    )
    return my_crystal.to_pymatgen()
